name: Helm Deployer
description: Helm wrapper intended for use with github.com/bcgov-nr/quickstart-openshift
branding:
  icon: package
  color: blue

inputs:
  ### Required
  oc_namespace:
    description: 'OpenShift namespace'
    required: true
  oc_token:
    description: 'OpenShift token'
    required: true
  release:
    description: Deployment release; usually repo-name-[PR|test|prod]
    required: true
    type: string

  ### Typical / recommended
  environment:
    description: Environment name; omit for PRs
    required: false
    type: string
  oc_server:
    default: https://api.silver.devops.gov.bc.ca:6443
    description: 'OpenShift server'
    required: false
    type: string
  params:
    description: 'Extra parameters to pass to helm upgrade'
    default: ''
    required: false
    type: string
  tag:
    description: Specify a tag to deploy; defaults to PR number
    required: false
    type: string
  triggers:
    description: Paths used to trigger a build; e.g. ('./backend/' './frontend/)
    required: false
    type: string

  ### Usually a bad idea / not recommended
  delete_completed:
    description: Delete completed pods
    default: true
  directory:
    description: 'Chart directory'
    default: 'charts'
    required: false
    type: string
  repository:
    description: Optionally, specify a different repo to clone
    default: ${{ github.repository }}
  timeout-minutes:
    description: 'Timeout minutes'
    default: 10
    required: false
    type: number
  values:
    description: 'Values file'
    default: 'values.yaml'
    required: false
    type: string

outputs:
  triggered:
    description: 'Has a deployment has been triggered?'
    value: ${{ steps.triggers.outputs.triggered }}

runs:
  using: composite
  steps:
    # Triggers will fire if omitted or matched against a diff
    - uses: bcgov-nr/action-diff-triggers@v0.2.0
      id: triggers
      with:
        triggers: ${{ inputs.triggers }}

    # Exit if no deployment required/triggered
    - if: steps.triggers.outputs.triggered == 'false'
      shell: bash
      run: |
        echo "No deployment required/triggered!"
        exit 0

    # Otherwise, get the associated PR number (PR or merged)
    - name: Get PR Number
      id: pr
      uses: bcgov-nr/action-get-pr@v0.0.1

    # Use any provided tags, otherwise use the PR number
    - name: Set Tag
      id: tag
      shell: bash
      run: |
        if [ -z ${{ inputs.tag }} ]; then
          echo "tag=${{ steps.pr.outputs.pr }}" >> $GITHUB_ENV
        else
          echo "tag=${{ inputs.tag }}" >> $GITHUB_ENV
        fi

    # Checkout, handling override repo
    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}

    - name: Deploy
      env:
        repo_release: ${{ github.event.repository.name }}-${{ inputs.release }}
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
          oc login --token=${{ inputs.oc_token }} --server=${{ inputs.oc_server }}
          oc project ${{ inputs.oc_namespace }} # Safeguard!

          # Interrupt any previous jobs (status = pending-upgrade)
          PREVIOUS=$(helm status ${{ env.repo_release }} -o json | jq .info.status || true)
          if [[ ${PREVIOUS} =~ pending ]]; then
            echo "Rollback triggered"
            helm rollback ${{ env.repo_release }} || \
              helm uninstall ${{ env.repo_release }}
          fi

          # Clean previous deployments for PR pipeline, if any 
          if [ -z ${{ inputs.environment }} ]; then
            helm uninstall ${{ env.repo_release }} || true
            # Remove Bitnami Postgres PVCs
            oc delete pvc data-${{ env.repo_release }}-bitnami-pg-0 || \
              echo "Not found: pvc data-${{ env.repo_release }}-bitnami-pg-0"
          fi

          # Prepare Helm chart
          helm dependency update
          helm package --app-version="$tag" --version=$tag .
          
          # Deploy Helm chart
          helm upgrade \
            --set-string global.repository=${{ github.repository }} \
            --set-string global.tag=$tag \
            ${{ inputs.params }} \
            --install --wait --atomic  ${{ env.repo_release }} \
            --timeout ${{ inputs.timeout-minutes }}m \
            --values ${{ inputs.values }} \
            ./${{ github.event.repository.name }}-$tag.tgz

          # Print history
          helm history ${{ env.repo_release }}
          
    - if: inputs.delete_completed == 'true'
      shell: bash
      run: |
        # Expand for succeeded pod cleanup (optional)

        # Pod Cleanup
        oc login --token=${{ inputs.oc_token }} --server=${{ inputs.oc_server }}
        oc project ${{ inputs.oc_namespace }} #Safeguard!

        # Cleanup completed pods
        oc delete po --field-selector=status.phase==Succeeded || true
